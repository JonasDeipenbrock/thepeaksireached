-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public."user-address"
(
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    "number" text COLLATE pg_catalog."default",
    street text COLLATE pg_catalog."default",
    city text COLLATE pg_catalog."default",
    post_code text COLLATE pg_catalog."default",
    country text COLLATE pg_catalog."default",
    extra_info text COLLATE pg_catalog."default",
    CONSTRAINT "user-metadata_pkey" PRIMARY KEY (id),
    CONSTRAINT "user-address_id_fkey" FOREIGN KEY (id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."user-address"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."user-address"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."user-address" TO anon;

GRANT ALL ON TABLE public."user-address" TO authenticated;

GRANT ALL ON TABLE public."user-address" TO postgres;

GRANT ALL ON TABLE public."user-address" TO service_role;

COMMENT ON TABLE public."user-address"
    IS 'Includes address info';
CREATE POLICY "Users can update own metadata"
    ON public."user-address"
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = id));

CREATE TABLE IF NOT EXISTS public.peaks
(
    id uuid NOT NULL,
    name text COLLATE pg_catalog."default",
    elevation smallint,
    coordinates real[],
    metadata json,
    CONSTRAINT peaks_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.peaks
    OWNER to postgres;

ALTER TABLE IF EXISTS public.peaks
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.peaks TO anon;

GRANT ALL ON TABLE public.peaks TO authenticated;

GRANT ALL ON TABLE public.peaks TO postgres;

GRANT ALL ON TABLE public.peaks TO service_role;

COMMENT ON TABLE public.peaks
    IS 'Collects the peaks used in the app';

REVOKE ALL ON TABLE public.profiles FROM anon;
REVOKE ALL ON TABLE public.profiles FROM authenticated;
REVOKE ALL ON TABLE public.profiles FROM postgres;
REVOKE ALL ON TABLE public.profiles FROM service_role;
REVOKE ALL ON TABLE public.profiles FROM supabase_admin;
GRANT ALL ON TABLE public.profiles TO supabase_admin;

GRANT ALL ON TABLE public.profiles TO authenticated;

GRANT ALL ON TABLE public.profiles TO anon;

GRANT ALL ON TABLE public.profiles TO postgres;

GRANT ALL ON TABLE public.profiles TO service_role;

ALTER TABLE IF EXISTS public.profiles DROP COLUMN IF EXISTS username;

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN firstname text COLLATE pg_catalog."default" NOT NULL;

ALTER TABLE IF EXISTS public.profiles
    ADD COLUMN lastname text COLLATE pg_catalog."default" NOT NULL;

ALTER TABLE IF EXISTS public.profiles DROP CONSTRAINT IF EXISTS username_length;
